{"version":3,"sources":["serviceWorker.js","component/Card.js","component/CardList.js","component/SearchBox.js","component/Scroll.js","component/Errorboundry.js","containers/App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","Errorboundry","hasError","info","this","setState","Component","App","onSearchChange","event","searchfild","target","value","fetch","response","json","users","filterrobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ac620f90.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card= ({name,email,id}) =>{\r\n\treturn(\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t  <img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\r\n\t\t  <div>\r\n\t\t\t    <h2>{name}</h2>\r\n\t\t\t    <p>{email}</p>\r\n\t\t  </div>\r\n\t\t</div>\r\n\t\t)\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robots}) =>{\r\n\t\r\n\r\n\treturn (\r\n\t<div>\r\n\t{\r\n\t\trobots.map((user,i)=>{\r\n\t\t\treturn (\r\n\t\t\t\t<Card \r\n\t\t\t\t\tkey={i} \r\n\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\temail={robots[i].email} \r\n\t\t\t\t/>\r\n\t\t\t)\r\n\t\t})\r\n\t}\r\n\t</div>\r\n)\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\treturn (\r\n\t<div className='pa2' >\t\r\n\t    <input\r\n\t    className='pa3 ba b--green bg-lightest-bleu' \r\n\t    type='search' \r\n\t    placeholder='search robots' \r\n\t    onChange= {searchChange} \r\n\t    />\r\n\r\n\t</div>    \r\n\t);\r\n\t\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style= {{ overflowY: 'scroll', border:'5px solid black', height:'900px'}} >\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\r\n\t);\r\n}\r\nexport default Scroll;","import React , {Component} from 'react';\r\n\r\nclass Errorboundry extends Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\thasError : false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error,info){\r\n\t\tthis.setState({hasError : true})\r\n\t}\r\n\r\n\trender() {\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn <h1>Ooops. That is not good</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default Errorboundry;\r\n\r\n","import React, {Component} from 'react';\r\nimport CardList from '../component/CardList';\r\nimport SearchBox from '../component/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../component/Scroll';\r\nimport Errorboundry from '../component/Errorboundry';\r\n// import {robots} from './robots';\r\n\r\nclass App extends Component {\r\n\tconstructor(){\r\n\tsuper()\r\n\tthis.state= {\r\n\t\trobots : [],\r\n\t\tsearchfild:'',\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t    fetch('https://jsonplaceholder.typicode.com/users')\r\n\t         .then(response=> response.json())\r\n\t         .then(users => this.setState({robots : users})); \r\n\t\t    \r\n\t\t    \r\n\t    // this.setState({robots : robots})\r\n\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({ searchfild: event.target.value});\r\n\t}\r\n\trender(){\r\n\tconst {robots,searchfild}= this.state;\r\n\tconst filterrobots= robots.filter(robot =>{\r\n\t\treturn robot.name.toLowerCase().includes(searchfild.toLowerCase())\r\n\t\t})\r\n\tif (!robots.length){\r\n\t\treturn <h1 className='tc pv7'>Loading..</h1>\r\n\t} else { \r\n\t\treturn (\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1 className='f1'>RoboFriends</h1> \r\n\t\t\t\t<SearchBox searchChange={this.onSearchChange} />\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<Errorboundry>\r\n\t\t\t\t\t\t<CardList robots = {filterrobots} />\r\n\t\t\t\t\t</Errorboundry>\t\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t\t)\r\n\t\t}\r\n    }\r\n}\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\n\nReactDOM.render(<App/>,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}